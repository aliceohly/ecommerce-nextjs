generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// the below modle is firslty being populated by running the commmand 'npx prisma db pull'
model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  description String
  imageUrl    String
  name        String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  cartItems   CartItem[]

  @@map("products") // this is the name of the collection in the database
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  items  CartItem[]
  userId String?    @db.ObjectId
  user   User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("carts")
}

// Cart example
// {
//   id: '663f2759708b06b18a28ff73',
//   userId: null,
//   createdAt: 2024-05-11T08:07:53.962Z,
//   updatedAt: 2024-05-11T08:07:53.962Z,
//   items: [
//     {
//       id: '66459eef96f150e42f12bd69',
//       productId: '65eab55a65121a9796cb6d6c',
//       cartId: '663f2759708b06b18a28ff73',
//       quantity: 1,
//       product: [Object]
//     },
//     {
//       id: '66459f1696f150e42f12bd6a',
//       productId: '65eab27665121a9796cb6d68',
//       cartId: '663f2759708b06b18a28ff73',
//       quantity: 1,
//       product: [Object]
//     }
//   ]
// }

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity  Int

  @@map("cartitems")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
